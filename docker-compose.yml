version: '3.8'

services:
  # ==============================================================================
  # Task Management API Server
  # ==============================================================================
  task-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        VERSION: ${VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME:-now}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
    image: task-management:${VERSION:-latest}
    container_name: task-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SERVER_PORT: 8080
      MAX_TASKS: ${MAX_TASKS:-1000}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-3600}
      INVARIANT_CHECKING: "true"
      TZ: ${TZ:-UTC}
      # Database configuration (for future use)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskmanagement
      DB_USER: ${DB_USER:-taskuser}
      DB_PASSWORD: ${DB_PASSWORD:-taskpass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./config:/app/config:ro
      - task-data:/app/data
    networks:
      - task-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================================================
  # PostgreSQL Database (for future persistence layer)
  # ==============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: task-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: taskmanagement
      POSTGRES_USER: ${DB_USER:-taskuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-taskpass}
      POSTGRES_INIT_SCRIPTS: /docker-entrypoint-initdb.d
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - task-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taskuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==============================================================================
  # Redis Cache (for session management)
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: task-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==============================================================================
  # TLA+ Model Checker (for continuous verification)
  # ==============================================================================
  tla-checker:
    build:
      context: .
      dockerfile: Dockerfile
      target: tla-verify
    container_name: tla-checker
    volumes:
      - ./:/tla:ro
      - tla-results:/results
    environment:
      TLA_WORKERS: ${TLA_WORKERS:-4}
      TLA_MEMORY: ${TLA_MEMORY:-4G}
    command: |
      sh -c "while true; do
        java -Xmx${TLA_MEMORY:-4G} -cp /opt/tla/tla2tools.jar tlc2.TLC \
          -workers ${TLA_WORKERS:-4} \
          -config TaskManagementImproved.cfg \
          -metadir /results \
          TaskManagementImproved.tla;
        sleep 3600;
      done"
    networks:
      - task-network
    profiles:
      - verification

  # ==============================================================================
  # Prometheus Monitoring
  # ==============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: task-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - task-network
    profiles:
      - monitoring

  # ==============================================================================
  # Grafana Dashboard
  # ==============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: task-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - task-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ==============================================================================
  # Jaeger Tracing
  # ==============================================================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: task-jaeger
    restart: unless-stopped
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    networks:
      - task-network
    profiles:
      - tracing

  # ==============================================================================
  # Development Environment
  # ==============================================================================
  task-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: task-dev
    ports:
      - "8080:8080"
      - "2345:2345"  # Delve debugger
    environment:
      LOG_LEVEL: debug
      DEBUG_MODE: "true"
      SERVER_PORT: 8080
    volumes:
      - ./task-management:/app
      - go-modules:/go/pkg/mod
    networks:
      - task-network
    depends_on:
      - postgres
      - redis
    profiles:
      - development

  # ==============================================================================
  # Nginx Reverse Proxy
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: task-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - task-network
    depends_on:
      - task-api
    profiles:
      - production

  # ==============================================================================
  # Backup Service
  # ==============================================================================
  backup:
    image: alpine:latest
    container_name: task-backup
    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - ./backups:/backups
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    command: |
      sh -c "apk add --no-cache postgresql-client redis && \
      while true; do
        timestamp=$$(date +%Y%m%d_%H%M%S)
        pg_dump -h postgres -U ${DB_USER:-taskuser} taskmanagement > /backups/postgres_$$timestamp.sql
        redis-cli -h redis --rdb /backups/redis_$$timestamp.rdb
        find /backups -name '*.sql' -mtime +7 -delete
        find /backups -name '*.rdb' -mtime +7 -delete
        sleep 86400
      done"
    networks:
      - task-network
    depends_on:
      - postgres
      - redis
    profiles:
      - backup

# ==============================================================================
# Networks
# ==============================================================================
networks:
  task-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  task-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  tla-results:
    driver: local
  nginx-cache:
    driver: local
  go-modules:
    driver: local