\* Configuration file for verifying discovered properties
\* Use different sections based on verification goals

\* ============================================================================
\* COMMON CONSTANTS
\* ============================================================================
CONSTANTS
    Users = {alice, bob, charlie}
    MaxTasks = 15
    MaxTime = 100
    Titles = {task1, task2, task3, task4, task5}
    Descriptions = {desc1, desc2, desc3}
    NULL = NULL

\* ============================================================================
\* SPECIFICATION
\* ============================================================================
SPECIFICATION Spec

\* ============================================================================
\* VERIFICATION PROFILES
\* Comment/uncomment based on verification focus
\* ============================================================================

\* ----------------------------------------------------------------------------
\* PROFILE 1: CORE SAFETY VERIFICATION (Fast)
\* ----------------------------------------------------------------------------
\* State space reduction for quick verification
CONSTRAINT
    /\ Cardinality(DOMAIN tasks) <= 5
    /\ clock <= 20
    /\ nextTaskId <= 6

\* Essential safety invariants
INVARIANT TypeInvariant
INVARIANT SafetyInvariant
INVARIANT DependencyTemporalConsistency
INVARIANT ValidTaskIds
INVARIANT NoDuplicateTaskIds
INVARIANT ConsistentTimestamps
INVARIANT NoCyclicDependencies
INVARIANT AuthenticationRequired

\* ----------------------------------------------------------------------------
\* PROFILE 2: EXTENDED SAFETY (Medium)
\* Uncomment for comprehensive safety checking
\* ----------------------------------------------------------------------------
\* INVARIANT DeadlineConsistency
\* INVARIANT CompletionDependencyCheck
\* INVARIANT UniqueActiveSession
\* INVARIANT BugPriorityConsistency
\* INVARIANT PriorityInheritance

\* Workload constraints
\* INVARIANT WorkloadBalance

\* ----------------------------------------------------------------------------
\* PROFILE 3: LIVENESS VERIFICATION (Slow)
\* Requires fairness - uncomment one section at a time
\* ----------------------------------------------------------------------------
\* Basic liveness
\* PROPERTY EventualCompletion
\* PROPERTY FairProgress
\* PROPERTY EventualUnblocking

\* Advanced liveness with bounds
\* PROPERTY BoundedCompletion
\* PROPERTY DependencyResolution
\* PROPERTY SessionTermination

\* Priority-based liveness
\* PROPERTY NoStarvation
\* PROPERTY PriorityProgress
\* PROPERTY OverdueEscalation

\* ----------------------------------------------------------------------------
\* PROFILE 4: FAIRNESS TESTING (Very Slow)
\* Test with small state space
\* ----------------------------------------------------------------------------
\* CONSTRAINT Cardinality(DOMAIN tasks) <= 3
\* CONSTRAINT clock <= 10

\* PROPERTY CriticalTaskFairness
\* PROPERTY UserSessionFairness
\* PROPERTY DependencyCheckFairness

\* ----------------------------------------------------------------------------
\* PROFILE 5: TEMPORAL PROPERTIES (Slow)
\* Sequence and ordering constraints
\* ----------------------------------------------------------------------------
\* PROPERTY AuthenticationPrecedence
\* PROPERTY CreationBeforeModification
\* PROPERTY DependencyOrdering
\* PROPERTY StatusTransitionOrdering
\* PROPERTY MonotonicTaskIds
\* PROPERTY TimestampProgression

\* ----------------------------------------------------------------------------
\* PROFILE 6: DEBUGGING MODE
\* For investigating specific issues
\* ----------------------------------------------------------------------------
\* Enable state predicates for debugging
\* CONSTRAINT ~DeadlockExists
\* CONSTRAINT ~PriorityInversionExists
\* CONSTRAINT OverdueTasksCount < 5
\* CONSTRAINT BlockedRatio < 50

\* System health monitoring
\* INVARIANT SystemHealthy

\* Performance metrics
\* VIEW <<CompletionRate, BlockedRatio, SystemActive>>

\* ----------------------------------------------------------------------------
\* PROFILE 7: STRESS TESTING
\* Test system under load
\* ----------------------------------------------------------------------------
\* CONSTANTS
\*     Users = {u1, u2, u3, u4, u5}
\*     MaxTasks = 50
\*     MaxTime = 200

\* CONSTRAINT SystemUnderLoad => WorkloadBalance
\* PROPERTY WorkDistribution

\* ----------------------------------------------------------------------------
\* PROFILE 8: REGRESSION TESTING
\* Known issue scenarios
\* ----------------------------------------------------------------------------
\* Test specific counterexamples
\* CONSTRAINT
\*     \* Prevent known bad state
\*     /\ ~(tasks[1].status = "completed" /\ 
\*          2 \in tasks[1].dependencies /\
\*          tasks[2].status # "completed")

\* ============================================================================
\* ACTION CONSTRAINTS
\* Limit actions for focused testing
\* ============================================================================

\* Test only authentication and task creation
\* ACTION_CONSTRAINT
\*     /\ (\E u \in Users : Authenticate(u))
\*     \/ (\E t \in Titles, d \in Descriptions, p \in Priorities,
\*           u \in Users : CreateTask(t, d, p, u, "NULL", {}, {}))
\*     \/ UNCHANGED vars

\* Test only status transitions
\* ACTION_CONSTRAINT
\*     /\ Cardinality(DOMAIN tasks) >= 3  \* Need existing tasks
\*     /\ (\E taskId \in DOMAIN tasks, newStatus \in TaskStates :
\*           UpdateTaskStatus(taskId, newStatus))
\*     \/ UNCHANGED vars

\* Test dependency chains
\* ACTION_CONSTRAINT
\*     /\ nextTaskId <= 5
\*     /\ (\E deps \in SUBSET (1..4) :
\*           CreateTask(..., deps))

\* ============================================================================
\* ALIAS FOR BETTER OUTPUT
\* ============================================================================
ALIAS StateInfo == [
    tasks_total |-> Cardinality(DOMAIN tasks),
    tasks_by_status |-> [
        pending |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "pending"}),
        in_progress |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "in_progress"}),
        completed |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "completed"}),
        blocked |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "blocked"}),
        cancelled |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "cancelled"})
    ],
    active_sessions |-> Cardinality({u \in Users : sessions[u]}),
    current_user |-> currentUser,
    clock |-> clock,
    critical_tasks |-> Cardinality({t \in DOMAIN tasks : tasks[t].priority = "critical"}),
    overdue_count |-> OverdueTasksCount,
    workload_balanced |-> ~WorkloadImbalanced,
    deadlock_exists |-> DeadlockExists
]

\* ============================================================================
\* SYMMETRY OPTIMIZATION
\* ============================================================================
\* If users/tasks are interchangeable, use symmetry
\* SYMMETRY Permutations(Users)

\* ============================================================================
\* VIEW FOR STATE DISTINCTION
\* ============================================================================
VIEW <<
    Cardinality(DOMAIN tasks),
    {tasks[t].status : t \in DOMAIN tasks},
    currentUser,
    clock
>>

\* ============================================================================
\* POSTCONDITION FOR SPECIFIC TESTS
\* ============================================================================
\* Verify specific end states
\* POSTCONDITION
\*     /\ Cardinality({t \in DOMAIN tasks : tasks[t].status = "completed"}) >= 3
\*     /\ ~DeadlockExists
\*     /\ CompletionRate >= 50

\* ============================================================================
\* CHECK DEADLOCK
\* ============================================================================
CHECK_DEADLOCK TRUE