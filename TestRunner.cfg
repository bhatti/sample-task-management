\* Test Runner Configuration for TaskManagementImproved
\* This configuration runs specific test scenarios

SPECIFICATION TestComplexWorkflow

\* Import the base configuration
CONSTANTS
    Users = {alice, bob, charlie}
    MaxTasks = 10  \* Increased for complex scenarios
    MaxTime = 50   \* Increased for time-based tests
    Titles = {task1, task2, task3, task4, task5}
    Descriptions = {desc1, desc2, desc3}

\* Model values
CONSTANT
    NULL = NULL
    EMPTY_STRING = EMPTY_STRING

\* Constraints for test execution
CONSTRAINT
    /\ nextTaskId <= MaxTasks + 1
    /\ clock <= MaxTime

\* Test-specific invariants
INVARIANT AssertAuthenticationRequired
INVARIANT AssertUniqueSequentialIds
INVARIANT AssertDependencyIntegrity
INVARIANT AssertSessionManagement

\* Standard invariants
INVARIANT TypeInvariant
INVARIANT SafetyInvariant
INVARIANT NoOrphanTasks
INVARIANT TaskOwnership
INVARIANT ValidTaskIds
INVARIANT NoDuplicateTaskIds
INVARIANT NoCyclicDependencies

\* Enable deadlock checking
CHECK_DEADLOCK TRUE

\* Test execution modes (uncomment one at a time)
\* MODE 1: Run all basic tests
\* PROPERTY TestBasicLifecycle

\* MODE 2: Run collaboration tests
\* PROPERTY TestMultiUserCollaboration

\* MODE 3: Run dependency tests
\* PROPERTY TestTaskDependencies

\* MODE 4: Run priority tests
\* PROPERTY TestPriorityEscalation

\* MODE 5: Run reassignment tests
\* PROPERTY TestTaskReassignment

\* MODE 6: Run bulk operation tests
\* PROPERTY TestBulkOperations

\* MODE 7: Test invalid operations (expect violations)
\* PROPERTY TestInvalidOperations

\* MODE 8: Run concurrent session tests
\* PROPERTY TestConcurrentSessions

\* MODE 9: Run time-based tests
\* PROPERTY TestTimeBasedOperations

\* MODE 10: Test cycle prevention
\* PROPERTY TestCyclicDependencyPrevention

\* MODE 11: Run edge case tests
\* PROPERTY TestEdgeCases

\* MODE 12: Run complex workflow (default)
\* PROPERTY TestComplexWorkflow

\* Performance monitoring
VIEW <<
    Cardinality(DOMAIN tasks),
    nextTaskId,
    clock,
    {u \in Users : sessions[u] = TRUE}
>>

\* Debug information
ALIAS TestStatus == [
    scenario |-> "ComplexWorkflow",
    totalTasks |-> Cardinality(DOMAIN tasks),
    tasksByStatus |-> [
        pending |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "pending"}),
        inProgress |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "in_progress"}),
        completed |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "completed"}),
        cancelled |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "cancelled"}),
        blocked |-> Cardinality({t \in DOMAIN tasks : tasks[t].status = "blocked"})
    ],
    tasksByPriority |-> [
        low |-> Cardinality({t \in DOMAIN tasks : tasks[t].priority = "low"}),
        medium |-> Cardinality({t \in DOMAIN tasks : tasks[t].priority = "medium"}),
        high |-> Cardinality({t \in DOMAIN tasks : tasks[t].priority = "high"}),
        critical |-> Cardinality({t \in DOMAIN tasks : tasks[t].priority = "critical"})
    ],
    userTaskCounts |-> [u \in Users |-> Cardinality(GetUserTasks(u))],
    activeSessions |-> {u \in Users : sessions[u] = TRUE},
    currentUser |-> currentUser,
    time |-> clock
]